// Generated by CoffeeScript 1.9.3
Realtime.Models.orderTable = Backbone.Model.extend({
  defaults: {
    data: [],
    tableVis: 'hide'
  },
  url: "https://" + Realtime.config.endpoint + "/admin/1.4/rest/?method=" + Realtime.config.method,
  parse: function(response) {
    var arr, channel, channelCode, channelTotals, day, hour, i, index, item, j, k, l, len, len1, len2, len3, len4, m, n, ref, ref1, ref2, ref3, sum, totals, val;
    window.ordersByLastTouch = response;
    ref1 = Realtime.channelList;
    for (j = 0, len = ref1.length; j < len; j++) {
      channel = ref1[j];
      channel.value = 0;
    }
    day = response.report.data;
    totals = [];
    for (k = 0, len1 = day.length; k < len1; k++) {
      hour = day[k];
      ref2 = hour.breakdown;
      for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
        channel = ref2[i];
        sum = Number(channel.counts[0]) + (totals[i] ? totals[i].value : 0);
        totals[i] = {
          name: channel.name,
          value: sum
        };
      }
    }
    channelTotals = totals;
    for (index = m = 0, len3 = channelTotals.length; m < len3; index = ++m) {
      item = channelTotals[index];
      arr = item.name.split(':');
      val = item.value;
      ref = {
        sourcecode: Number(arr[0]),
        referringDomain: arr[1]
      };
      channelCode = Realtime.establishChannels(ref);
      ref3 = Realtime.channelList;
      for (n = 0, len4 = ref3.length; n < len4; n++) {
        channel = ref3[n];
        if (channelCode === channel.channel) {
          channel.value += val;
        }
      }
    }
    Realtime.channelList = _(Realtime.channelList).sortBy('value').reverse();
    Realtime.channelList = _(Realtime.channelList).reject(function(channel) {
      return channel.value === 0;
    });
    this.set('data', Realtime.channelList);
    return this.set('tableVis', 'visible');
  },
  params: Realtime.api.params('orders', 'prop17', 'today', 100)
});

// Generated by CoffeeScript 1.9.3
Realtime.Models.ordersTrend = Backbone.Model.extend({
  initialize: function() {
    return this.on('change:dateFrom', function(model) {
      return this.set('update', true);
    });
  },
  defaults: {
    data: [],
    dateFrom: '-12 hours',
    dateGranularity: (function() {
      var date, hours;
      date = new Date;
      hours = date.getHours();
      return "minute:" + (hours + 1);
    })(),
    update: false
  },
  url: "https://" + Realtime.config.endpoint + "/admin/1.4/rest/?method=" + Realtime.config.method,
  parse: function(response) {
    var data, dateStr, day, i, interval, len;
    day = response.report.data;
    data = [];
    for (i = 0, len = day.length; i < len; i++) {
      interval = day[i];
      dateStr = interval.name;
      dateStr = dateStr.replace(/-/g, '/');
      dateStr = dateStr.replace(/T/g, ' ');
      dateStr = dateStr.substr(0, dateStr.indexOf('+'));
      data.push({
        name: new Date(dateStr),
        value: interval.breakdownTotal[0]
      });
    }
    window.trendData = data;
    return this.set('data', data);
  },
  params: function() {
    return Realtime.api.params('orders', 'prop17', this.get('dateFrom'), null, null, this.get('dateGranularity'));
  }
});
// Generated by CoffeeScript 1.9.3
Realtime.Models.orderTotal = Backbone.Model.extend({
  defaults: {
    metric: ''
  },
  url: "https://" + Realtime.config.endpoint + "/admin/1.4/rest/?method=" + Realtime.config.method,
  parse: function(response) {
    return this.set('metric', response.report.totals[0]);
  },
  params: (function() {
    return Realtime.api.params('orders', 'prop17', 'today');
  })()
});
// Generated by CoffeeScript 1.9.3
Realtime.Models.pageViewBreakdown = Backbone.Model.extend({
  url: "https://" + Realtime.config.endpoint + "/admin/1.4/rest/?method=" + Realtime.config.method,
  parse: function(response) {
    var day, hour, i, j, k, len, len1, page, ref, total, totals;
    day = response.report.data;
    totals = [];
    for (j = 0, len = day.length; j < len; j++) {
      hour = day[j];
      ref = hour.breakdown;
      for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
        page = ref[i];
        total = parseInt(page.counts[0]) + (totals[i] ? totals[i].value : 0);
        totals[i] = {
          name: page.name,
          value: total
        };
      }
    }
    return this.set('data', totals);
  },
  params: (function() {
    return Realtime.api.params('event1', 'page', 'today', 10);
  })()
});
// Generated by CoffeeScript 1.9.3
Realtime.Models.pageViewTotals = Backbone.Model.extend({
  defaults: {
    metricIOL: '',
    metricHWH: '',
    metricIIQ: '',
    metricOP1: '',
    metricOP2: '',
    metricOrdersSum: '',
    data: []
  },
  url: "https://" + Realtime.config.endpoint + "/admin/1.4/rest/?method=" + Realtime.config.method,
  parse: function(response) {
    var day, hwhRegEx, hwhSum, iiqRegEx, iiqSum, iolRegEx, iolSum, op1RegEx, op1Sum, op2RegEx, op2Sum, ordersSum;
    window.pageViewResponse = response;
    iolRegEx = /^CreditExpert : Public : Sign Up : Order Confirmation$/;
    hwhRegEx = /^CreditExpert : Public : Sign Up : Halfway House$/;
    iiqRegEx = /^CreditExpert : Public : Sign Up : IIQ$/;
    op1RegEx = /^CreditExpert : Public : Sign Up : Order 1$/;
    op2RegEx = /^CreditExpert : Public : Sign Up : Order 2$/;
    day = response.report.data;
    iolSum = (function() {
      var _hour, hour, i, j, len, len1, ref, sum;
      sum = 0;
      for (i = 0, len = day.length; i < len; i++) {
        hour = day[i];
        ref = hour.breakdown;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _hour = ref[j];
          if (iolRegEx.test(_hour.name)) {
            sum += Number(_hour.counts[0]);
          }
        }
      }
      return sum;
    })();
    hwhSum = (function() {
      var _hour, hour, i, j, len, len1, ref, sum;
      sum = 0;
      for (i = 0, len = day.length; i < len; i++) {
        hour = day[i];
        ref = hour.breakdown;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _hour = ref[j];
          if (hwhRegEx.test(_hour.name)) {
            sum += Number(_hour.counts[0]);
          }
        }
      }
      return sum;
    })();
    iiqSum = (function() {
      var _hour, hour, i, j, len, len1, ref, sum;
      sum = 0;
      for (i = 0, len = day.length; i < len; i++) {
        hour = day[i];
        ref = hour.breakdown;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _hour = ref[j];
          if (iiqRegEx.test(_hour.name)) {
            sum += Number(_hour.counts[0]);
          }
        }
      }
      return sum;
    })();
    op1Sum = (function() {
      var _hour, hour, i, j, len, len1, ref, sum;
      sum = 0;
      for (i = 0, len = day.length; i < len; i++) {
        hour = day[i];
        ref = hour.breakdown;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _hour = ref[j];
          if (op1RegEx.test(_hour.name)) {
            sum += Number(_hour.counts[0]);
          }
        }
      }
      return sum;
    })();
    op2Sum = (function() {
      var _hour, hour, i, j, len, len1, ref, sum;
      sum = 0;
      for (i = 0, len = day.length; i < len; i++) {
        hour = day[i];
        ref = hour.breakdown;
        for (j = 0, len1 = ref.length; j < len1; j++) {
          _hour = ref[j];
          if (op2RegEx.test(_hour.name)) {
            sum += Number(_hour.counts[0]);
          }
        }
      }
      return sum;
    })();
    ordersSum = iolSum + hwhSum + iiqSum;
    this.set('metricIOL', iolSum);
    this.set('metricHWH', hwhSum);
    this.set('metricIIQ', iiqSum);
    this.set('metricOP1', op1Sum);
    this.set('metricOP2', op2Sum);
    this.set('metricOrdersSum', ordersSum);
    return this.set('data', [
      {
        name: 'OP1',
        value: op1Sum
      }, {
        name: 'OP2',
        value: op2Sum
      }, {
        name: 'Confirmation',
        value: ordersSum
      }
    ]);
  },
  params: (function() {
    var search;
    search = {
      type: "or",
      keywords: ["CreditExpert : Public : Sign Up : IIQ", "CreditExpert : Public : Sign Up : Halfway House", "CreditExpert : Public : Sign Up : Order Confirmation", "CreditExpert : Public : Sign Up : Order 1", "CreditExpert : Public : Sign Up : Order 2"]
    };
    return Realtime.api.params('event1', 'page', 'today', 10, search);
  })()
});
